[hppm_proc.py]
psyon=0
com=COM4
#set the fade speed of wave mode, 0 is off, 2 works best for 64 lights, 11 for 11
fadeR=2
fadeG=2
fadeB=2
#0, lights off on shutdown 1, lights on on shutdown
lightOn=1
#if you send data in wave mode faster than the wave speed
chngBProp=1
#you can either display that data right away on the wave start pixel, 1
#or discard that data, 0
#this is for the random walk set you can control your color set with this
#very simple implementation for now may make color changes smoother later
minrwR=0
maxrwR=127
minrwG=0
maxrwG=127
minrwB=0
maxrwB=127

#incoming number of values per second per channel, should match max
datar=60
#these are the pixel values where waves will start
dpR=11
dpG=25
dpB=40
#set these to 1 to randomize the pixel that color waves start on
rpR=0
rpG=0
rpB=0
#if set to 1 all colors will use the pixel location for G
srp=0
#framerate to output to arduino; 0, flow control limited
outr=0
#arduino framerate limit, may overload buffer, 0-255, 0 is no limiting
fps=0
#set to LPD8806 or WS2801, the strand type you have
sType=LPD8806
#number of lights you have
#numLights=11
numLights=52
#a single strand of 32 lights strips is capable of addressing 65536 lights
#however the atmega238 only has memory for just over 64? lights in wave mode
#using the normal sketch and ? lights using the extended sketch
#the atmega2560 has memory for 313 lights in wave mode using the normal
#sketch and ? lights in wave mode using the extended sketch
#if you get an something with more memory you need to update the arduino code
#DI connects to pin 11 (or 51 if you have a Mega)
#CI connects to pin 13 (or 52 if you have a Mega)

#if for some reason you are running without the max part you can set the initial mode here
#this sets wavemode 0 off 1 on
woR=1
woG=1
woB=1
#these set the main mode
#0 listen for audio
#1 test colors interlaced
#2 test colors sequentially
#3 random color walk
mR=0
mG=0
mB=0
#this is the wave speed delays max 255ms (251 if you want to stay in pixel sync)
wsR=0
wsG=0
wsB=0

